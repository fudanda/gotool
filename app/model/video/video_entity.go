// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package video

import (
	"database/sql"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table operations.
type Entity struct {
	VideoID      uint        `orm:"video_id,primary"    json:"video_id"` // 自增ID
	CreateAt     *gtime.Time `orm:"create_at"     json:"create_at"`      // 创建时间
	UpdateAt     *gtime.Time `orm:"update_at"     json:"update_at"`      // 更新时间
	DeleteAt     *gtime.Time `orm:"delete_at"     json:"delete_at"`      // 删除时间
	Name         string      `orm:"name"            json:"name"`         // 请求ip
	Type         string      `orm:"type"            json:"type"`         // 请求ip
	Method       string      `orm:"method"        json:"method"`         // 请求方法
	Path         string      `orm:"path"          json:"path"`           // 请求路由
	Status       int         `orm:"status"        json:"status"`         // 状态
	Latency      int64       `orm:"latency"       json:"latency"`        // 延迟
	Agent        string      `orm:"agent"         json:"agent"`          // 代理
	ErrorMessage string      `orm:"error_message" json:"error_message"`  // 报错信息
	Request      string      `orm:"request"       json:"request"`        // 请求Body
	UserID       int         `orm:"user_id"       json:"user_id"`        // 用户id
	Response     string      `orm:"response"      json:"response"`       // 响应Body
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Insert does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
