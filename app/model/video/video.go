// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package video

import (
	"github.com/gogf/gf/errors/gerror"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gtime"
)

// Video 视频
type Video struct {
	VideoID      uint        `orm:"video_id,primary"    json:"VideoID"` // 自增ID
	CreateAt     *gtime.Time `orm:"create_at"     json:"CreatedAt"`     // 创建时间
	UpdateAt     *gtime.Time `orm:"update_at"     json:"UpdatedAt"`     // 更新时间
	DeleteAt     *gtime.Time `orm:"delete_at"     json:"DeletedAt"`     // 删除时间
	Name         string      `orm:"name"          json:"Name"`          // 名称
	Type         string      `orm:"type"          json:"type"`          // 类型
	Method       string      `orm:"method"        json:"method"`        // 请求方法
	Path         string      `orm:"path"          json:"path"`          // 请求路由
	Status       int         `orm:"status"        json:"status"`        // 状态
	Latency      int64       `orm:"latency"       json:"latency"`       // 延迟
	Agent        string      `orm:"agent"         json:"agent"`         // 代理
	ErrorMessage string      `orm:"error_message" json:"error_message"` // 报错信息
	Request      string      `orm:"request"       json:"body"`          // 请求Body
	Response     string      `orm:"response"      json:"resp"`          // 响应Body
}

//SearchReq 列表搜索参数
type SearchReq struct {
	Name     string `p:"name"`
	Type     string `p:"type"`
	PageNum  int    `p:"page"`     //当前页码
	PageSize int    `p:"pageSize"` //每页数
}

// AddReq 添加请求数据
type AddReq struct {
	Name string `p:"name" v:"required#分类名称不能为空"`
	Type uint   `p:"type"`
}

// // EditReq 修改请求数据
// type EditReq struct {
// 	CId      int64  `p:"cId" v:"required#参数错误"`
// 	CName    string `p:"type" v:"required#分类名称不能为空"`
// 	CStatus  uint   `p:"cStatus"`
// 	UpdateBy uint
// }

// GetList 获取列表
func GetList(req *SearchReq) (total int, list []*Entity, err error) {
	m := Model
	// if req != nil {
	// 	if req.Name != "" {
	// 		m = m.Where(Columns.name+" like ?", "%"+req.Name+"%")
	// 	}
	// 	if req.Type != "" {
	// 		m = m.Where(Columns.Type, gconv.Int(req.Type))
	// 	}
	// }
	total, err = m.Count()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("获取总行数失败")
		return
	}
	if req.PageNum == 0 {
		req.PageNum = 1
	}

	if req.PageSize == 0 {
		req.PageSize = 10
	}
	list, err = m.Page(req.PageNum, req.PageSize).Order(Columns.VideoID + " desc").All()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("获取数据失败")
		return
	}
	return
}
